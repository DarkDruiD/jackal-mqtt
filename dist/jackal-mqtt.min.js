function DataService(){var e={data:{}};return e}function MqttService(e,t){function n(e,t,n){M[e]=[t,n]}function a(e){delete M[e]}function c(e,t){var n="^";t+="/";for(var a=e.split("/"),c=0;c<a.length;c++){var i=a[c];"+"===i?n="([a-z]|[0-9])+/":n+="#"===i?"(([a-z]|[0-9])|/)*":i+"/"}return n+="$",n=new RegExp(n),n.test(t)?!0:!1}function i(){e.$broadcast("connected")}function r(t){0!==t.errorCode&&e.$broadcast("connectionLost")}function o(n){var a=n.payloadString,i=n.destinationName;for(var r in M)if(M.hasOwnProperty(r)){var o=c(r,i);o&&(t.data[M[r][1]]=a,e.$broadcast(M[r][0]))}}function s(e,t,n){v=new b.MQTT.Client(e,Number(t),"web_client_"+Math.round(1e3*Math.random())),v.onConnectionLost=r,v.onMessageArrived=o,n.onSuccess=i,v.connect(n)}function u(){v.disconnect()}function l(e,t,a){v.subscribe(e),n(e,t,a)}function d(e){v.unsubscribe(e),a(e)}function f(e,t,n){var a=JSON.stringify(t),c=new b.MQTT.Message(a);c.retained=n,c.detinationName=e,v.send(c)}var v,b=b,M={};return{connect:s,disconnect:u,subscribe:l,unsubscribe:d,publish:f,_addCallback:n,_deleteCallback:a,_chanelMatch:c,_callbacks:M}}!function(e){e.module("jackalMqtt.config",[]).value("jackalMqtt.config",{debug:!0}),e.module("jackalMqtt.services",[]),e.module("jackalMqtt",["jackalMqtt.config","jackalMqtt.services"])}(angular),angular.module("jackalMqtt.services").factory("mqttService",MqttService).factory("dataService",DataService),DataService.$inject=[],MqttService.$inject=["$rootScope","dataService"];
